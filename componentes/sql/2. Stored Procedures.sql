/* ---------------------------------------------------------------------- */
/* ------------------- Stored Procedures Audit Logs	  ------------------- */
/* ---------------------------------------------------------------------- */

DROP PROCEDURE IF EXISTS CREAR_LOG; 

DELIMITER $$

CREATE PROCEDURE CREAR_LOG (IN VAR_EXECUTOR VARCHAR(100),IN VAR_LOG_DESCRIPTION VARCHAR(100),IN VAR_LOG_TYPE INT)
BEGIN
	
    INSERT INTO AUDIT_LOGS (
		EXECUTOR,
        LOG_DESCRIPTION,
        LOG_TYPE,
        FECHA
	) VALUES (
		VAR_EXECUTOR,
        VAR_LOG_DESCRIPTION,
        VAR_LOG_TYPE,
        NOW()
    );
        
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS VER_LOGS;  

DELIMITER $$

CREATE PROCEDURE VER_LOGS ()
BEGIN

    SELECT 
		AL.EXECUTOR,
        AL.LOG_DESCRIPTION,
        TP.LOG_DESCRIPTION AS LOG_TYPE,
        AL.FECHA
	FROM AUDIT_LOGS AL
	INNER JOIN LOG_TYPE TP ON TP.LOG_TYPE_ID = AL.LOG_TYPE
    ORDER BY AL.ID_LOG DESC; 
    
END $$

DELIMITER ; 


/* ---------------------------------------------------------------------- */
/* --------------------- Stored Procedures Usuarios --------------------- */
/* ---------------------------------------------------------------------- */

DROP PROCEDURE IF EXISTS CREAR_USUARIO; 

DELIMITER $$

CREATE PROCEDURE CREAR_USUARIO (IN VAR_NOMBRE_USUARIO VARCHAR(50), IN VAR_CONTRASEÑA VARCHAR(25))
BEGIN

	INSERT INTO USUARIOS (
		NOMBRE_USUARIO,
        CONTRASEÑA,
        CDATE
    ) VALUES (
		VAR_NOMBRE_USUARIO, 
        VAR_CONTRASEÑA,
        NOW()
	);
    
    CALL CREAR_LOG('New',CONCAT("New user created ",VAR_NOMBRE_USUARIO),3);

END $$

DELIMITER ; 


DROP PROCEDURE IF EXISTS ACTUALIZAR_USUARIO; 

DELIMITER $$

CREATE PROCEDURE ACTUALIZAR_USUARIO (IN VAR_EXECUTOR VARCHAR(100),IN VAR_ID INT, IN VAR_NOMBRE_USUARIO VARCHAR(50), IN VAR_CONTRASEÑA VARCHAR(25), IN VAR_ROLE_USUARIO VARCHAR(25),IN VAR_ESTADO BOOLEAN, IN VAR_CONTRASEÑA_REQUERIDA BOOLEAN)
BEGIN

	/* Get the correct ID for the role type */
	DECLARE VAR_ROLE_ID INT; 
	CALL CREAR_LOG(VAR_EXECUTOR,CONCAT("Update of user ",VAR_NOMBRE_USUARIO),1);
        
		SELECT 
			ID_ROLE
		INTO
			VAR_ROLE_ID
		FROM	
			ROLES
		WHERE TIPO_ROLE = VAR_ROLE_USUARIO
        LIMIT 1;
	

	IF (VAR_CONTRASEÑA_REQUERIDA = TRUE) THEN 

			UPDATE USUARIOS SET
				NOMBRE_USUARIO = VAR_NOMBRE_USUARIO, 
				CONTRASEÑA = VAR_CONTRASEÑA, 
				ROLE_USUARIO = VAR_ROLE_ID, 
				ESTADO = VAR_ESTADO
			WHERE
				ID_USUARIO = VAR_ID; 
				
	ELSE 

		UPDATE USUARIOS SET
			NOMBRE_USUARIO = VAR_NOMBRE_USUARIO,
			ROLE_USUARIO = VAR_ROLE_ID, 
			ESTADO = VAR_ESTADO
		WHERE
			ID_USUARIO = VAR_ID;

	END IF;
    
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS ELIMINAR_USUARIO; 

DELIMITER $$

CREATE PROCEDURE ELIMINAR_USUARIO (IN VAR_EXECUTOR VARCHAR(100), IN VAR_ID INT)
BEGIN

	DELETE FROM 
		USUARIOS 
	WHERE
		ID_USUARIO = VAR_ID; 
        
	CALL CREAR_LOG (VAR_EXECUTOR,CONCAT("Elimination of user ",VAR_ID),2);
    
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS VER_USUARIOS; 

DELIMITER $$

CREATE PROCEDURE VER_USUARIOS ()
BEGIN

	SELECT 
		USUARIOS.ID_USUARIO,
		USUARIOS.NOMBRE_USUARIO,
        USUARIOS.ROLE_USUARIO,
        USUARIOS.CDATE,
        USUARIOS.ESTADO,
        USUARIOS.ID_USUARIO,
        ROLES.TIPO_ROLE
	FROM 
		USUARIOS
	INNER JOIN ROLES ON USUARIOS.ROLE_USUARIO = ROLES.ID_ROLE;
        
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS CONSULTAR_USUARIO; 

DELIMITER $$

CREATE PROCEDURE CONSULTAR_USUARIO(IN VAR_USERNAME VARCHAR(25), IN VAR_PASSWORD VARCHAR(25))
BEGIN

	SELECT 
		USUARIOS.NOMBRE_USUARIO,
        USUARIOS.ROLE_USUARIO,
        USUARIOS.CDATE,
        USUARIOS.ESTADO,
        USUARIOS.ID_USUARIO,
        ROLES.TIPO_ROLE
	FROM 
		USUARIOS
	INNER JOIN ROLES ON USUARIOS.ROLE_USUARIO = ROLES.ID_ROLE
	WHERE NOMBRE_USUARIO = VAR_USERNAME AND CONTRASEÑA = VAR_PASSWORD; 
    
END $$

DELIMITER ;	
/* ---------------------------------------------------------------------- */
/* --------------------- Stored Procedures Mensaje 	--------------------- */
/* ---------------------------------------------------------------------- */

DROP PROCEDURE IF EXISTS CREAR_MENSAJE; 

DELIMITER $$

CREATE PROCEDURE CREAR_MENSAJE (IN VAR_EXECUTOR VARCHAR(100), IN VAR_ID_USUARIO INT, IN VAR_ID_HILO INT, IN VAR_MENSAJE VARCHAR(1000))
BEGIN

	INSERT INTO MENSAJE (
		ID_USUARIO,
        ID_HILO,
        FECHA,
        MENSAJE
    ) VALUES (
		VAR_ID_USUARIO,
        VAR_ID_HILO,
		current_date(),
        VAR_MENSAJE
    );
    
    CALL CREAR_LOG(VAR_EXECUTOR,CONCAT("New Message en hilo: ",VAR_ID_HILO),3);

END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS ACTUALIZAR_MENSAJE; 

DELIMITER $$

CREATE PROCEDURE ACTUALIZAR_MENSAJE (IN VAR_ID_COMENTARIO INT, IN VAR_ID_USUARIO INT, IN VAR_ID_HILO INT, IN VAR_FECHA DATE, IN VAR_MENSAJE VARCHAR(1000))
BEGIN
	UPDATE MENSAJE SET
		ID_USUARIO = VAR_ID_USUARIO, 
        ID_HILO = VAR_ID_HILO,
        FECHA = VAR_ID_FECHA,
        MENSAJE = VAR_MENSAJE
	WHERE
		ID_COMENTARIO = VAR_ID_COMENTARIO;
        
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS ELIMINAR_MENSAJE; 

DELIMITER $$

CREATE PROCEDURE ELIMINAR_MENSAJE (IN VAR_EXECUTOR VARCHAR(100), IN VAR_ID_COMENTARIO INT)
BEGIN
	
    DELETE FROM 
		MENSAJE
	WHERE
		ID_COMENTARIO = VAR_ID_COMENTARIO;
        
	CALL CREAR_LOG (VAR_EXECUTOR,CONCAT("Elimination of message ",VAR_ID_COMENTARIO),2);
    
END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS VER_MENSAJES;

DELIMITER $$

CREATE PROCEDURE VER_MENSAJES (IN VAR_ID_USUARIO INT)
BEGIN

	SELECT 
		ID_COMENTARIO,
        ID_USUARIO,
        NOMBRE_HILO,
        FECHA,
        MENSAJE,
        R.NOMBRE_HILO
	FROM MENSAJE U
		INNER JOIN hilo R ON U.ID_HILO = R.ID_HILO
	Where ID_USUARIO = VAR_ID_USUARIO
    ORDER BY NOMBRE_HILO DESC;

END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS VER_MENSAJES_VALIDACION;

DELIMITER $$

CREATE PROCEDURE VER_MENSAJES_VALIDACION ()
BEGIN

	SELECT 
		ID_COMENTARIO,
		U.ID_USUARIO,
		NOMBRE_USUARIO,
		FECHA,
		MENSAJE,
		R.NOMBRE_HILO
	FROM MENSAJE U
        INNER JOIN HILO R ON U.ID_HILO = R.ID_HILO
        INNER JOIN USUARIOS US ON US.ID_USUARIO = U.ID_USUARIO
	ORDER BY NOMBRE_USUARIO, NOMBRE_HILO DESC;

END $$

DELIMITER ; 


DROP PROCEDURE IF EXISTS COUNT_MENSAJES_USUARIOS; 

DELIMITER $$

CREATE PROCEDURE COUNT_MENSAJES_USUARIOS (IN VAR_ID_USUARIO INT)
BEGIN

	SELECT 
		DATE_FORMAT(FECHA, '%M %Y') AS MESSAGE_MONTH,
		COUNT(ID_COMENTARIO) AS TOTAL_MESSAGES
	FROM MENSAJE 
	WHERE ID_USUARIO = VAR_ID_USUARIO
	GROUP BY MESSAGE_MONTH
	ORDER BY FECHA ASC; 

END $$

DELIMITER ; 

DROP PROCEDURE IF EXISTS CONSULTAR_MENSAJES_HILO; 

DELIMITER $$
CREATE PROCEDURE CONSULTAR_MENSAJES_HILO (IN VAR_IDHilo INT)
BEGIN 
SELECT 
		ID_COMENTARIO,
        U.ID_USUARIO,
        FECHA,
        MENSAJE,
        R.NOMBRE_USUARIO
	FROM MENSAJE U
		INNER JOIN usuarios R ON U.ID_USUARIO = R.ID_USUARIO
	WHERE ID_HILO = VAR_IDHilo
    ORDER BY FECHA DESC;
		
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS TOTAL_MENSAJES_USUARIOS; 

DELIMITER $$

CREATE PROCEDURE TOTAL_MENSAJES_USUARIOS(IN VAR_ID_USUARIO INT)
BEGIN
	SELECT
        COUNT(MENSAJE) AS CANTIDAD_MENSAJES
	FROM 
		MENSAJE
    WHERE
		ID_USUARIO = VAR_ID_USUARIO;
END$$

DELIMITER ;

/* ---------------------------------------------------------------------- */
/* --------------------- Stored Procedures Roles 	--------------------- */
/* ---------------------------------------------------------------------- */

DROP PROCEDURE IF EXISTS CONSULTAR_ROLES; 

DELIMITER $$

CREATE PROCEDURE CONSULTAR_ROLES()
BEGIN

	SELECT 
		ID_ROLE,
        TIPO_ROLE
	FROM 
		ROLES; 

END $$

DELIMITER ; 



